#include <stdio.h>
// defining some constants
#define INF 9999
#define MAX 10

// prototyping of the function
void DijkstraAlgorithm(int Graph[MAX][MAX], int size, int start);

// defining the function for Dijkstra's Algorithm
void DijkstraAlgorithm(int Graph[MAX][MAX], int size, int start) {
  int cost[MAX][MAX], distance[MAX], previous[MAX];
  int visited_nodes[MAX], counter, minimum_distance, next_node, i, j;

  // creating cost matrix
  for (i = 0; i < size; i++)
    for (j = 0; j < size; j++)
      if (Graph[i][j] == 0)
        cost[i][j] = INF;
      else
        cost[i][j] = Graph[i][j];

  for (i = 0; i < size; i++) {
    distance[i] = cost[start][i];
    previous[i] = start;
    visited_nodes[i] = 0;
  }

  distance[start] = 0;
  visited_nodes[start] = 1;
  counter = 1;

  while (counter < size - 1) {
    minimum_distance = INF;

    for (i = 0; i < size; i++)
      if (distance[i] < minimum_distance && !visited_nodes[i]) {
        minimum_distance = distance[i];
        next_node = i;
}

    visited_nodes[next_node] = 1;
    for (i = 0; i < size; i++)
      if (!visited_nodes[i])
        if (minimum_distance + cost[next_node][i] < distance[i]) {
          distance[i] = minimum_distance + cost[next_node][i];
          previous[i] = next_node;
        }
    counter++;
  }

  // printing the distance
  for (i = 0; i < size; i++)
    if (i != start) {
      printf("\nDistance from the Source Node to %d: %d", i, distance[i]);
    }
}

// main function
int main() {
  // defining variables
  int Graph[MAX][MAX], i, j, size, source;
  // declaring the size of the matrix
  printf("enter size of matrix:");
scanf("%d",&size);
printf("enter matrix elements for %d rows and %d columns:\n",size,size);
for(i=0;i<size;i++)
{
for(j=0;j<size;j++)
{
scanf("%2d",&Graph[i][j]);

  // declaring the nodes of graph

  source = 0;
}
}
  // calling the DijkstraAlgorithm() function by passing the Graph, the number of nodes and the source node
  DijkstraAlgorithm(Graph, size, source);

  return 0;
}
